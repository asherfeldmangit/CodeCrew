design_task:
  name: "Design Task"
  description: >
    Produce a markdown design doc using the outline defined in the engineering_lead goal.
    Ensure the design fits inside folder {project_name}.
    Use ONLY markdown in the output.
  expected_output: >
    MANDATORY: A detailed markdown design identifying the modules, classes and functions in the project.
  agent: architect_agent
  output_file: output/{project_name}/{project_name}_design.md

breaking_task:
  name: "Breaking Task"
  description: >
    Break down the design document into a list of tasks.
    Each task should be atomic and self-contained.
    Each task should have a testable definition of done. 
    Each task should be assigned to the relevant engineer (backend_engineer, frontend_engineer, test_engineer)
  expected_output: >
    MANDATORY: A list of tasks that are atomic and self-contained.
    Each task should have a testable definition of done.
  agent: task_breaker
  output_file: output/{project_name}/{project_name}_tasks.md
  context:
    - design_task

backend_code_task:
  name: "Backend Code Task"
  description: >
    Implement the assigned backend task.
    • Package folder: `{project_name_lower}` (lower-case project name).
    • Use package-relative imports only.
    • Guidelines: match design names, add type hints & docstrings, follow PEP 8, keep deps minimal (list in requirements.txt).
    • Run `pip install -r requirements.txt` before executing.
    Here are the requirements: {requirements}
  expected_output: >
    - Raw Python project implementing the design (no markdown / code fences).
    - requirements.txt (empty if no deps).
  agent: backend_engineer
  context:
    - design_task
    - breaking_task
  output_file: output/{project_name}/{project_name}.txt

backend_code_review_task:
  name: "Backend Code Review Task"
  description: >
    Review backend code against design.
    Code must conform to python coding Principle of least astonishment.
    Flag PEP 8, type-hint, docstring & readability issues (filename:line + comment; add fix if trivial).
  expected_output: >
    - Markdown review listing only high-/critical issues.
  agent: architect_agent
  # Include timestamp to avoid overwriting previous reviews
  output_file: output/{project_name}/{project_name}_code_review_{timestamp}.md
  context:
    - backend_code_task
    - design_task

fix_backend_comments_task:
  name: "Fix Backend Comments Task"
  description: >
    Fix the comments in the backend_code_task.
  expected_output: >
    MANDATORY: A detailed markdown code review with comments on the code.
  agent: backend_engineer
  # Save fixed-review to a separate file per run
  output_file: output/{project_name}/{project_name}_code_review_fix_{timestamp}.md
  context:
    - backend_code_task
    - backend_code_review_task

frontend_task:
  name: "Frontend Task"
  description: >
    Create a ReactJS SPA inside folder `frontend/` that demonstrates the backend.
    • Provide `package.json` with scripts: `npm install`, `npm start`.
    • UI must be responsive, modern and interactive but light.
    • Integrate with backend as described in the design (direct import or HTTP calls).
    Here are the requirements: {requirements}
  expected_output: >
    - Raw source files for a ReactJS project under `frontend/` (index.html, src/, package.json, etc.).
    - Do NOT include markdown or code fences.
  agent: frontend_engineer
  context:
    - backend_code_task
  output_file: output/{project_name}/frontend_source.txt

# ---- NEW TASK: dependency_audit_task ----
dependency_audit_task:
  name: "Dependency Audit Task"
  description: >
    Audit each requirements.txt:
      • Validate package on PyPI
      • Pin to latest stable
      • Flag abandoned / vulnerable packages
    Output cleaned, pinned requirements.txt plus report.
  expected_output: >
    - Markdown audit summary + updated requirements.txt
  agent: architect_agent
  context:
    - backend_code_task
    - frontend_task
  output_file: output/{project_name}/{project_name}_dep_audit.md

frontend_code_review_task:
  name: "Frontend Code Review Task"
  description: >
    Review ReactJS frontend: verify design alignment & backend integration; flag accessibility, code organisation, component reuse, styling consistency and performance issues.
  expected_output: >
    - Markdown review listing only high-/critical frontend issues.
  agent: architect_agent
  # Timestamped file to preserve each review
  output_file: output/{project_name}/{project_name}_frontend_code_review_{timestamp}.md
  context:
    - frontend_task
    - design_task
    - dependency_audit_task

fix_frontend_comments_task:
  name: "Fix Frontend Comments Task"
  description: >
    Fix the comments in the frontend_task according to the architect's feedback.
  expected_output: >
    MANDATORY: Updated UI code reflecting the feedback provided.
  agent: frontend_engineer
  output_file: output/{project_name}/frontend_source.txt
  context:
    - frontend_task
    - frontend_code_review_task

test_task:
  name: "Test Task"
  description: >
    Write pytest tests in `test_{project_name}.py` covering happy, edge & failure cases (<1 s runtime).
  expected_output: >
    - Raw Python test module `test_{project_name}.py` (no markdown).
  agent: test_engineer
  context:
    - fix_backend_comments_task
    - dependency_audit_task

end_to_end_test_task:
  name: "End-to-End Test Task"
  description: >
    Perform end-to-end testing of the entire {project_name} application and report any bugs found.
  expected_output: >
    MANDATORY: A markdown list of bugs found during end-to-end testing or "no bugs" if none are found.
  agent: test_engineer
  output_file: output/{project_name}/{project_name}_e2e_bugs.md
  context:
    - backend_code_task
    - fix_frontend_comments_task

# ---- NEW TASK: materialise_code_task ----
materialise_code_task:
  name: "Materialise Code"
  description: >
    Split *_{project_name}.txt* into real source files under output/{project_name}/. Fail if any listed file is missing.
  expected_output: >
    - Source files materialised under output/{project_name}/.
  agent: utility_agent
  context:
    - backend_code_task
    - frontend_task
  output_file: none

# ---- NEW TASK: readme_task ----
readme_task:
  name: "Generate README Task"
  description: >
    Write minimal README.md with:
      • Title + 1-line description
      • Python version
      • Backend setup: venv + `pip install -r requirements.txt`
      • Frontend setup: `npm install` then `npm start` inside `frontend/`
      • Combined helper command: `./run.sh ui` or `./run.sh cli`
      • Run tests (`pytest`)
  expected_output: >
    - README.md saved to output/{project_name}/
  agent: architect_agent
  # Run after code & UI are finalised and dependencies audited
  context:
    - fix_frontend_comments_task
    - dependency_audit_task
    - materialise_code_task
  output_file: output/{project_name}/README.md
  