import unittest

from TicTacToe import T3Game

class TestTicTacToe(unittest.TestCase):
    def setUp(self):
        # Use PvP mode for tests that require human moves
        self.game = T3Game(game_mode='PvP')

    def test_reset_board(self):
        # Fill the board and change current_player, then reset and check
        self.game.board = [['X', 'O', 'X'], ['O', 'X', 'O'], ['O', 'X', 'O']]
        self.game.current_player = 'O'
        self.game.reset_board()
        for row in self.game.board:
            self.assertEqual(row, ['', '', ''])
        self.assertEqual(self.game.current_player, 'X')

    def test_make_move(self):
        # Valid move on an empty board
        result = self.game.make_move(0, 0)
        self.assertTrue(result)
        self.assertEqual(self.game.board[0][0], 'X')

        # Attempting to move on an already occupied cell should fail
        result = self.game.make_move(0, 0)
        self.assertFalse(result)

        # Move out of bounds should fail
        result = self.game.make_move(3, 3)
        self.assertFalse(result)

    def test_switch_player(self):
        # Verify that the player switches correctly
        self.assertEqual(self.game.current_player, 'X')
        self.game.switch_player()
        self.assertEqual(self.game.current_player, 'O')
        self.game.switch_player()
        self.assertEqual(self.game.current_player, 'X')

    def test_check_win_row(self):
        # Create a winning row
        self.game.board = [['X', 'X', 'X'], ['', '', ''], ['', '', '']]
        self.assertTrue(self.game.check_win())

    def test_check_win_column(self):
        # Create a winning column
        self.game.board = [['O', '', ''], ['O', '', ''], ['O', '', '']]
        self.assertTrue(self.game.check_win())

    def test_check_win_diagonals(self):
        # Diagonal from top-left to bottom-right
        self.game.board = [['X', '', ''], ['', 'X', ''], ['', '', 'X']]
        self.assertTrue(self.game.check_win())

        # Diagonal from top-right to bottom-left
        self.game.board = [['', '', 'O'], ['', 'O', ''], ['O', '', '']]
        self.assertTrue(self.game.check_win())

    def test_check_draw(self):
        # Create a full board with no winning combination
        self.game.board = [['X', 'O', 'X'], ['X', 'O', 'O'], ['O', 'X', 'X']]
        self.assertTrue(self.game.check_draw())

        # If a cell is empty, it should not be a draw
        self.game.board[0][0] = ''
        self.assertFalse(self.game.check_draw())

    def test_get_available_moves(self):
        # All 9 positions should be available on a fresh board
        available = self.game.get_available_moves()
        self.assertEqual(len(available), 9)

        # After one move, available moves should decrease
        self.game.make_move(0, 0)
        available = self.game.get_available_moves()
        self.assertEqual(len(available), 8)

    def test_machine_move(self):
        # Test machine move in PvC mode
        game_pvc = T3Game(game_mode='PvC')
        # Set current player to machine's mark
        game_pvc.current_player = 'O'
        # Pre-fill some board positions while leaving moves available
        game_pvc.board = [['X', 'O', ''], ['X', '', 'O'], ['', '', 'X']]
        available_before = len(game_pvc.get_available_moves())
        result = game_pvc.machine_move()
        self.assertTrue(result)
        available_after = len(game_pvc.get_available_moves())
        self.assertEqual(available_after, available_before - 1)

    def test_play_turn_human_valid(self):
        # In PvP mode, test a valid human turn
        result = self.game.play_turn(0, 0)
        # The move should be accepted; status can mention game continues, win, or draw
        self.assertIn(result['status'], ['Move accepted, game continues.', 'Player X wins!', 'The game is a draw.'])
        self.assertTrue(result['move_made'])
        self.assertEqual(self.game.board[0][0], 'X')

    def test_play_turn_human_invalid_parameters(self):
        # Test play_turn with missing row and col parameters in PvP mode
        result = self.game.play_turn()
        self.assertEqual(result['status'], 'Invalid move parameters for human player.')
        self.assertFalse(result['move_made'])

    def test_play_turn_cell_already_taken(self):
        # Place a move at (1,1), then attempt to play on the same cell
        self.game.make_move(1, 1)
        result = self.game.play_turn(1, 1)
        self.assertEqual(result['status'], 'Invalid move, cell already taken.')
        self.assertFalse(result['move_made'])

if __name__ == '__main__':
    unittest.main()